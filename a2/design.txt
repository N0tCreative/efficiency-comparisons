algorithm 1.1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
time complexity of n^2
average run time of 8115ms for array of 50,000 ints

counts the number of inversions needed to make the array in order
int bruteForce(int* arr, int size) {
	int count =0;
	//check if theres a number bigger in the remaining array (not including current) and adds one to count for each one found
	for(int i=0; i <= size-2; i++) {
		for(int j=i+1; j <= size-1; j++) {
			if(arr[i] > arr[j]){
				count++;
			}
		}
	}
	return count;
}


algorithm 1.2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
time complexity of nlogn
average run time of 15ms for array of 50,000 ints

counts the number of inversions needed to make the array in order
int divAndConq(int* arr, int size) {
	int count =0;
	int* arrb;
	int* arrc;
	//if the array size is 1 just return count =0 because no swapping needs to be done
	if(size >1) {
		//make 2 sub arrays and populate them with first and second half of original array
		arrb = malloc (sizeof(int) * (size/2));
		arrc = malloc (sizeof(int) * ceil(size/2.0));
		for(int i=0; i < (size/2); i++) {
			arrb[i] = arr[i];
		}
		for(int i=(size/2); i < size; i++) {
			arrc[i-(size/2)] = arr[i];
		}

		//sort the first subarray and count the amount of numbers out of place
		count +=divAndConq(arrb, (size/2));
		//sort the second subarray and count the amount of numbers out of place
		count +=divAndConq(arrc, (int)ceil(size/2.0));

		//set values to use for comparing each subarray
		int i=0, j=0, k=0;
		//make sure that neither subarray goes out of bounds and replace all elements in original array with a sorted version of the sub array ones
		while(i < (size/2) && j < (int)ceil(size/2.0)) {
			//if the first subarray has an element bigger than the second add the one from the second to the original array
			if(arrb[i] > arrc[j]) {
				arr[k++] = arrc[j++];
				//add the number of elements on the first array that are bigger than the current element of the second array (the # of elements in that array remaing) to the count
				count += (size/2)-i;
			}else { //otherwise just add the element of the first array
				arr[k++] = arrb[i++];
			}
			
		}
		//if all elements in the first array are copied then copy the rest of the second array to the original array
		if(i>=(size/2)) {
			while(j < (int)ceil(size/2.0)) {
				arr[k++] = arrc[j++];
			}
		} else { //if all elements in the second array are copied then copy the rest of the first array to the original array
			while(i < size/2) {
				arr[k++] = arrb[i++];
			}
		}
		//free all malloc'd memory
		free(arrb);
		free(arrc);
	}
	//return the current count
	return count;
}


algorithm 2.1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
time complexity of n^3
average run time of 62716 with 30,000 points

gets the hull from given array of points
double** bruteForce(double** arr, int size, int* hullSize) {
	double** hull = NULL;
	double aboveBelow =0;
	double result =0;

	//check if theres a number on both sides of a line created by two points
	for(int i=0; i <= size-1; i++) {
		for(int j=0; j <= size-1; j++) {
			if(i !=j) {
				double a =arr[j][1] - arr[i][1];
				double b =arr[i][0] - arr[j][0];
				double c =arr[i][0] * arr[j][1] -arr[i][1] * arr[j][0];
				//choose a point to compare others to that is not one of the two endpoints
				int m=0;
				while(m==i || m==j) {
					m++;
				}
				aboveBelow = a*(arr[m][0]) + b*(arr[m][1]) -c;
				/*if(j<size-1) {
					aboveBelow = a*arr[j+1][1] + b*arr[j+1][0] - c;
				} else if(i>0){
					aboveBelow = a*arr[0][1] + b*arr[0][0] - c;
				} else {
					aboveBelow = a*arr[1][1] + b*arr[1][0] - c;
				}*/
				if(aboveBelow) { //if the chosen point lies on the same line then the line from the two endpoints should not be there
								//instead there should be a line between both endpoints to the mid point
					int k =0;
					for(k=0; k < size-1; k++) {
						if(k!=i && k!=j) {
							result = a*(arr[k][0]) + b*(arr[k][1]) - c;
							if ((result > 0 && aboveBelow > 0) || (result < 0 && aboveBelow < 0)) { //if they share the same sign then do nothing
							} else { //if they dont then this isnt a extreme point ie theres a point between them or at least one above and below
								k = 0;
								break;
							}
						}
					}
					if (k == size-1) {
						(*hullSize) = (*hullSize) +1;
						hull =realloc(hull, sizeof(double*)* (*hullSize));
						if(!hull) {
							printf("no more memory3\n");
							return NULL;
						}
						hull[*hullSize-1] = arr[i];
						break;
					}
				}//end of if(aboveBelow)
			}
		}//end of for j loop
	}
	return hull;
}

sorts the hull in ascending order by x value (time to complete this is not included in run time number)
void divAndConq(double** arr, int size) {
	double** arrb;
	double** arrc;
	//if the array size is 1 just return count =0 because no swapping needs to be done
	if(size >1) {
		//make 2 sub arrays and populate them with first and second half of original array
		arrb = malloc (sizeof(double*) * (size/2));
		arrc = malloc (sizeof(double*) * ceil(size/2.0));
		for(int i=0; i < (size/2); i++) {
			arrb[i] = arr[i];
		}
		for(int i=(size/2); i < size; i++) {
			arrc[i-(size/2)] = arr[i];
		}

		//sort the first subarray and count the amount of numbers out of place
		divAndConq(arrb, (size/2));
		//sort the second subarray and count the amount of numbers out of place
		divAndConq(arrc, (int)ceil(size/2.0));

		//set values to use for comparing each subarray
		int i=0, j=0, k=0;
		//make sure that neither subarray goes out of bounds and replace all elements in original array with a sorted version of the sub array ones
		while(i < (size/2) && j < (int)ceil(size/2.0)) {
			//if the first subarray has an element bigger than the second add the one from the second to the original array
			if(arrb[i][0] > arrc[j][0]) {
				arr[k++] = arrc[j++];
			}else { //otherwise just add the element of the first array
				arr[k++] = arrb[i++];
			}
			
		}
		//if all elements in the first array are copied then copy the rest of the second array to the original array
		if(i>=(size/2)) {
			while(j < (int)ceil(size/2.0)) {
				arr[k++] = arrc[j++];
			}
		} else { //if all elements in the second array are copied then copy the rest of the first array to the original array
			while(i < size/2) {
				arr[k++] = arrb[i++];
			}
		}
		//free all malloc'd memory
		free(arrb);
		free(arrc);
	}
}

algorithm 2.2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
time complexity of nlogn
average runtime of 2ms given 30,000 points

sets up quickHullSub algorithm
double** quickHull(double** arr, int size, int* hullSize) {
	double** hull = malloc(sizeof(double*) * 2);
	double** tmpHull;
	double** arrB = malloc(sizeof(double*));
	double** arrC = malloc(sizeof(double*));
	double a;
	double b;
	double c;
	int bSize =0;
	int cSize =0;
	int tmpHullSize =0;

	double* right = arr[0];
	double* left = arr[0];

	//find left and rightmost elements
	for(int i=1; i<size; i++) {
		if(arr[i][0] > right[0]) {
			right =arr[i];
		} else if(arr[i][0] < left[0]) {
			left =arr[i];
		}
	}
	hull[0] =left;
	hull[1] =right;
	*hullSize =2;

	a =right[1] -left[1];
	b =left[0] - right[0];
	c = (left[0] * right[1]) - (left[1] * right[0]);

	//for every element not on that line add it to either the lower array or upper array depending on where it is located
	for(int i=0; i< size; i++) {
		double result =a*(arr[i][0]) + b*(arr[i][1]) -c;
		if(arr[i] != right && arr[i] !=left) {
			if(result > 0) {
				bSize++;
				arrB = realloc(arrB, sizeof(double*) * bSize);
				if(!arrB) {
					printf("no more memory\n");
					return NULL;
				}
				arrB[bSize-1] = arr[i];
			} else if(result < 0) {
				cSize++;
				arrC = realloc(arrC, sizeof(double*) * cSize);
				if(!arrC) {
					printf("no more memory\n");
					return NULL;
				}
				arrC[cSize-1] = arr[i];
			}
		}
	}
	/*printf("bsize= %d\n", bSize);
	for(int i=0; i< bSize; i++) {
		printf("B[%d]= %lf, %lf\n", i, arrB[i][0], arrB[i][1]);
	}
	printf("csize= %d\n", cSize);
	for(int i=0; i< cSize; i++) {
		printf("C[%d]= %lf, %lf\n", i, arrC[i][0], arrC[i][1]);
	}*/
	//printf("Lower~~~~~~~~~~\n");
	tmpHull = quickHullSub(arrB, bSize, &tmpHullSize, left, right);
	if(tmpHull) {
		hull =realloc(hull, sizeof(double*) * ((*hullSize) + tmpHullSize));
		for(int i=0; i< tmpHullSize; i++) {
			hull[(*hullSize) + i] = tmpHull[i];
		}
		*hullSize += tmpHullSize;
		free(tmpHull);
	}
	//printf("B hull ptr %p\n", tmpHull);
	free(arrB);
	
	
	tmpHullSize =0;
	//printf("Upper~~~~~~~~~~\n");
	tmpHull = quickHullSub(arrC, cSize, &tmpHullSize, right, left);
	//printf("C hull ptr %p\n", tmpHull);
	if(tmpHull) {
		hull =realloc(hull, sizeof(double*) * ((*hullSize) + tmpHullSize));
		for(int i=0; i< tmpHullSize; i++) {
			hull[(*hullSize) + i] = tmpHull[i];
		}
		*hullSize += tmpHullSize;
		free(tmpHull);
	}
	free(arrC);

	return hull;
}

finds farthest point from current and includes that in the hull and finds next points outside of current hull
double** quickHullSub(double** arr, int size, int* hullSize, double* r, double* t) {
	double** tmpHull = NULL;
	double** hull = NULL;
	double** arrB = NULL;
	double** arrC = NULL;
	double* farthest;
	double result;
	double a;
	double b;
	double c;
	double maxDist;
	int bSize =0;
	int cSize =0;
	int tmpHullSize =0;

	if(!arr || size ==0) {
		*hullSize =0;
		return NULL;
	}

	arrB = malloc(sizeof(double*));
	arrC = malloc(sizeof(double*));

	farthest =arr[0];
	a =t[1] -r[1];
	b =r[0] -t[0];
	c =(r[0] * t[1]) - (r[1] * t[0]);
	maxDist =a*(arr[0][0]) + b*(arr[0][1]) -c;


	for(int i=1; i< size; i++) {
		result =a*(arr[i][0]) + b*(arr[i][1]) -c;
		if(result > maxDist) {
			farthest = arr[i];
			maxDist= result;
		}
	}
	hull=malloc(sizeof(double*));
	if(!hull) {
		printf("no more memory\n");
		return NULL;
	}
	hull[0] =farthest;
	(*hullSize)++;

	//add all points to the right of this new hull line to arrB
	a =farthest[1] -r[1];
	b =r[0] -farthest[0];
	c =(farthest[1] * r[0]) - (farthest[0] * r[1]);
	for(int i=0; i< size; i++) {
		if(arr[i] !=farthest && arr[i] != t && arr[i] !=r) {
			if((a*(arr[i][0]) +b*(arr[i][1]) -c) > 0) {
				arrB = realloc(arrB, sizeof(double**) * ++bSize);
				arrB[bSize-1] =arr[i];
			}
		}
	}

	//add all points to the right of this new hull line to arrC
	a =t[1] -farthest[1];
	b =farthest[0] -t[0];
	c =(farthest[0] * t[1]) - (farthest[1] * t[0]);
	for(int i=0; i< size; i++) {
		if(arr[i] !=farthest && arr[i] != t && arr[i] !=r) {
			if((a*(arr[i][0]) +b*(arr[i][1]) -c) > 0) {
				arrC = realloc(arrC, sizeof(double**) * ++cSize);
				arrC[cSize-1] =arr[i];
			}
		}
	}

	/*printf("farthest:%lf, %lf\n", farthest[0], farthest[1]);
	printf("maxdist= %lf\n", maxDist);
	printf("r= %lf, %lf\n", r[0],r[1]);
	printf("t= %lf, %lf\n", t[0],t[1]);
	printf("bSize=%d\n", bSize);
	for(int i=0; i< bSize; i++) {
		printf("innerB[%d]= %lf, %lf\n", i, arrB[i][0], arrB[i][1]);
	}
	printf("cSize=%d\n", cSize);
	for(int i=0; i< cSize; i++) {
		printf("innerC[%d]= %lf, %lf\n", i, arrC[i][0], arrC[i][1]);
	}
	printf("SubB~~~~~~~~~~~~~~\n");*/
	tmpHull = quickHullSub(arrB, bSize, &tmpHullSize, r, farthest);
	//printf("tempHullSzB=%d\n", tmpHullSize);
	//tmpHull =NULL;
	if(tmpHull) {
		hull =realloc(hull, sizeof(double*) * ((*hullSize) + tmpHullSize));
		if(!hull) {
			printf("no more memory\n");
			return NULL;
		}
		for(int i=0; i< tmpHullSize; i++) {
			hull[(*hullSize) + i] = tmpHull[i];
		}
		(*hullSize) += tmpHullSize;
		free(tmpHull);
	}
	free(arrB);
	tmpHullSize =0;

	//printf("SubC~~~~~~~~~~~~~~\n");
	tmpHull = quickHullSub(arrC, cSize, &tmpHullSize, farthest, t);
	//tmpHull =NULL;
	//printf("tempHullSzC=%d\n", tmpHullSize);
	if(tmpHull) {
		hull =realloc(hull, sizeof(double*) * ((*hullSize) + tmpHullSize));
		if(!hull) {
			printf("no more memory\n");
			return NULL;
		}
		for(int i=0; i< tmpHullSize; i++) {
			hull[(*hullSize) + i] = tmpHull[i];
		}
		(*hullSize) += tmpHullSize;
		free(tmpHull);
	}
	free(arrC);

	return hull;
}

used for sorting hull after its been found(not included in runtime)
void divAndConq(double** arr, int size) {
	double** arrb;
	double** arrc;
	//if the array size is 1 just return count =0 because no swapping needs to be done
	if(size >1) {
		//make 2 sub arrays and populate them with first and second half of original array
		arrb = malloc (sizeof(double*) * (size/2));
		arrc = malloc (sizeof(double*) * ceil(size/2.0));
		for(int i=0; i < (size/2); i++) {
			arrb[i] = arr[i];
		}
		for(int i=(size/2); i < size; i++) {
			arrc[i-(size/2)] = arr[i];
		}

		//sort the first subarray and count the amount of numbers out of place
		divAndConq(arrb, (size/2));
		//sort the second subarray and count the amount of numbers out of place
		divAndConq(arrc, (int)ceil(size/2.0));

		//set values to use for comparing each subarray
		int i=0, j=0, k=0;
		//make sure that neither subarray goes out of bounds and replace all elements in original array with a sorted version of the sub array ones
		while(i < (size/2) && j < (int)ceil(size/2.0)) {
			//if the first subarray has an element bigger than the second add the one from the second to the original array
			if(arrb[i][0] > arrc[j][0]) {
				arr[k++] = arrc[j++];
			}else { //otherwise just add the element of the first array
				arr[k++] = arrb[i++];
			}
			
		}
		//if all elements in the first array are copied then copy the rest of the second array to the original array
		if(i>=(size/2)) {
			while(j < (int)ceil(size/2.0)) {
				arr[k++] = arrc[j++];
			}
		} else { //if all elements in the second array are copied then copy the rest of the first array to the original array
			while(i < size/2) {
				arr[k++] = arrb[i++];
			}
		}
		//free all malloc'd memory
		free(arrb);
		free(arrc);
	}
}